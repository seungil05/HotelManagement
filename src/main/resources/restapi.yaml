openapi: 3.0.0
info:
  version: 1.0.0
  title: HotelManagement
  description: A simple API to illustrate OpenAPI concepts
paths:
  /guests:
    get:
      description: Returns a list of Guests
      responses:
        '200':
          description: Successfully returned a list of guests
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Guest'
    post:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Guest'
      responses:
        '200':
          description: Successfully created a new Guest
        '400':
          description: Failed to create a new guest
    put:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Guest'
      responses:
        '200':
          description: Successfully updated a guest
        '400':
          description: Failed to update a guest
  /guests/{id}:
    delete:
      description: Deletes a guest
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Guest ID
      responses:
        '200':
          description: Successfully deleted a guest
        '400':
          description: Failed to delete a guest
    get:
      description: Returns a guest by id
      parameters:
        - name: id
          in: path
          description: id of the guest
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully returned a guest by id
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/Guest'
        '400':
          description: Failed to return a guest by id
  /rooms:
    get:
      description: Returns a list of rooms
      responses:
        '200':
          description: Successfully returned a list of rooms
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Room'
    post:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Room'
      responses:
        '200':
          description: Successfully created a new room
        '400':
          description: Failed to create a new room
    put:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Room'
      responses:
        '200':
          description: Successfully updated a room
        '400':
          description: Failed to update a room
  /rooms/{id}:
    get:
      description: Returns a room by id
      parameters:
        - name: id
          in: path
          description: id of the room
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully returned a room by id
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/Room'
        '400':
          description: Failed to return a room by id
    delete:
      description: Deletes a room
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Room ID
      responses:
        '200':
          description: Successfully deleted a room
        '400':
          description: Failed to delete a room
  /employee:
    get:
      description: Returns a list of Employees
      responses:
        '200':
          description: Successfully returned a list of Employees
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Employee'
    post:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Employee'
      responses:
        '200':
          description: Successfully created a new Employee
        '400':
          description: Failed to create a new Employee
    put:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Employee'
      responses:
        '200':
          description: Successfully updated a Employee
        '400':
          description: Failed to update a Employee
  /employee/{id}:
    get:
      description: Returns a Employee by id
      parameters:
        - name: id
          in: path
          description: id of the Employee
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully returned a Employee by id
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/Employee'
        '400':
          description: Failed to return a Employee by id
    delete:
      description: Deletes a Employee
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Employee ID
      responses:
        '200':
          description: Successfully deleted a Employee
        '400':
          description: Failed to delete a Employee
  /users:
    post:
      requestBody:
          required: true
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successfully created a new User
        '400':
          description: Failed to create a new User
components:
  schemas:
    Guest:
      type: object
      required:
        - firstName
        - lastName
        - emailAddress
        - visitTime
        - roomId
      properties:
        guestId:
          type: integer
        firstName:
          type: string
        lastName:
          type: string
        emailAddress:
          type: string
        visitTime:
          type: integer
        roomId:
          type: integer
    Room:
      type: object
      required:
        - roomNumber
        - floor
      properties:
        roomId:
          type: integer
        roomNumber:
          type: integer
        floor:
          type: integer
        capacity:
          type: integer
        price:
          type: integer
    Employee:
      type: object
      required:
        - firstName
        - lastName
        - job
      properties:
        employeeId:
          type: integer
        firstName:
          type: string
        lastName:
          type: string
        job:
          type: string
    User:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string



  
